
import cv2 
import glob
import numpy as np
import copy
import matplotlib.pyplot as plt

    # create our own histogram function
def get_histogram(image, bins):
    # array with size of bins, set to zeros
    histogram = np.zeros(bins)
    
    # loop through pixels and sum up counts of pixels
    for pixel in image:
        histogram[pixel] += 1
    
    # return our final result
    return histogram

# create our cumulative sum function
def cumsum(a):
    a = iter(a)
    b = [next(a)]
    for i in a:
        b.append(b[-1] + i)
    return np.array(b)

path = glob.glob(r"C:\Users\sahru\OneDrive\Desktop\ENPM673 - code\project2\adaptive_hist_data\*.png")

for file in path:
    image = cv2.imread(file)
    frame_width = image.shape[1]
    frame_height = image.shape[0]

    # convert our image into a numpy array
    img1 = np.asarray(image)

# put pixels in a 1D array by flattening out img array
    flat = img1.flatten()

# execute our histogram function
    hist = get_histogram(flat, 256)

    cs = cumsum(hist)

# numerator & denomenator
    nj = (cs - cs.min()) * 255
    N = cs.max() - cs.min()

# re-normalize the cumsum
    cs = nj / N

# cast it back to uint8 since we can't use floating point values in images
    cs = cs.astype('uint8')

    # get the value from cumulative sum for every index in flat, and set that as img_new
    img_new = cs[flat]

# put array back into original shape since we flattened it
    img_new = np.reshape(img_new, image.shape)

    img_new = img_new.astype('uint8')

    cv2.imshow('',img_new)
    if cv2.waitKey(0) & 0xFF == ord('d'):
        break
cv2.destroyAllWindows()



# # set up side-by-side image display
#     fig = plt.figure()
#     fig.set_figheight(15)
#     fig.set_figwidth(15)

#     fig.add_subplot(1,2,1)
#     plt.imshow(image, cmap='gray')

# # display the new image
#     fig.add_subplot(1,2,2)
#     plt.imshow(img_new, cmap='gray')

#     plt.show(block=True)

#     plt.plot(cs)

#     # display the result
#     plt.plot(cs)

# # show the histogram
#     plt.hist(flat, bins=50)
#     plt.show()